<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://dmendivelso.github.io/vc/docs/shortcodes/rasterizacion/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dmendivelso.github.io/vc/docs/shortcodes/rasterizacion/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dmendivelso.github.io/vc/docs/shortcodes/rasterizacion/Algoritmo-de-Pintor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmendivelso.github.io/vc/docs/shortcodes/rasterizacion/Algoritmo-de-Pintor/</guid><description>Algoritmo del Pintor # Historia # El algoritmo del pintor se desempeña en la computación visual en 3D, en especial como algoritmo visual, este se caracteriza principalmente por su simplicidad en la aplicación. El algoritmo fue propuesto por primera vez por Martin Newell, Richard Newell y Tom Sancha en el año 1972 con el fin de solucionar el problema de “Hidden-surface determination” (Determinación de la Superficie Oculta).
Fundamentos # Este algoritmo se puede implementar basándose en el ordenamiento topológico, el cual se describe como un grafo dirigido de forma lineal de sus nodos, orientando en este caso esa linealidad en función de la profundidad de los polígonos que se encuentran en la figura, ilustración o imagen.</description></item><item><title/><link>https://dmendivelso.github.io/vc/docs/shortcodes/rasterizacion/Midpoint-circle-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmendivelso.github.io/vc/docs/shortcodes/rasterizacion/Midpoint-circle-algorithm/</guid><description>Midpoint circle algorithm # El algoritmo del punto medio del circulo es un algoritmo usado para determinar los puntos necesarios para rasterizar un circulo. Usamos el algoritmo del punto medio para calcular para calcular todos los puntos del perimetro del circulo en un primer octante y luego imprimimos el reflejo de estos puntos en los 7 octantes restantes para completar el circulo. Esto funciona debido a que el circulo es simetrico en cualquier direccion.</description></item></channel></rss>